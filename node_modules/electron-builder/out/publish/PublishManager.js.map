{
  "version": 3,
  "file": "PublishManager.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/PublishManager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { debug, isEmptyOrSpaces, asArray} from \"electron-builder-util\"\nimport { Publisher, PublishOptions, getResolvedPublishConfig, getCiTag } from \"./publisher\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { GitHubPublisher } from \"./gitHubPublisher\"\nimport { PublishConfiguration, GithubOptions, BintrayOptions, GenericServerOptions, VersionInfo, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport { log } from \"electron-builder-util/out/log\"\nimport { BintrayPublisher } from \"./BintrayPublisher\"\nimport { BuildInfo, ArtifactCreated } from \"../packagerApi\"\nimport { Platform } from \"electron-builder-core\"\nimport { safeDump } from \"js-yaml\"\nimport { writeFile, outputJson, createReadStream } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { ArchiveTarget } from \"../targets/ArchiveTarget\"\nimport { throwError } from \"electron-builder-util/out/promise\"\nimport isCi from \"is-ci\"\nimport * as url from \"url\"\nimport { PlatformSpecificBuildOptions } from \"../metadata\"\nimport { createHash } from \"crypto\"\n\nexport class PublishManager {\n  private readonly nameToPublisher = new Map<string, Publisher | null>()\n\n  readonly publishTasks: Array<Promise<any>> = []\n  private readonly errors: Array<Error> = []\n\n  private isPublishOptionGuessed = false\n  private isPublish = false\n\n  constructor(packager: Packager, private readonly publishOptions: PublishOptions) {\n    if (publishOptions.publish === undefined) {\n      if (process.env.npm_lifecycle_event === \"release\") {\n        publishOptions.publish = \"always\"\n      }\n      else if (isAuthTokenSet() ) {\n        const tag = getCiTag()\n        if (tag != null) {\n          log(`Tag ${tag} is defined, so artifacts will be published`)\n          publishOptions.publish = \"onTag\"\n          this.isPublishOptionGuessed = true\n        }\n        else if (isCi) {\n          log(\"CI detected, so artifacts will be published if draft release exists\")\n          publishOptions.publish = \"onTagOrDraft\"\n          this.isPublishOptionGuessed = true\n        }\n      }\n    }\n\n    if (publishOptions.publish != null && publishOptions.publish !== \"never\") {\n      this.isPublish = publishOptions.publish !== \"onTag\" || getCiTag() != null\n      if (this.isPublish && !isAuthTokenSet()) {\n        throw new Error(`Publish is set to ${publishOptions.publish}, but neither GH_TOKEN nor BT_TOKEN is not set`)\n      }\n    }\n\n    packager.addAfterPackHandler(async event => {\n      if (!(event.electronPlatformName == \"darwin\" || event.packager.platform === Platform.WINDOWS)) {\n        return\n      }\n\n      const packager = event.packager\n      const publishConfigs = await getPublishConfigsForUpdateInfo(packager, await getPublishConfigs(packager, null, false))\n      if (publishConfigs == null || publishConfigs.length === 0) {\n        return\n      }\n\n      await writeFile(path.join(packager.getResourcesDir(event.appOutDir), \"app-update.yml\"), safeDump(publishConfigs[0]))\n    })\n\n    packager.artifactCreated(event => this.addTask(this.artifactCreated(event)))\n  }\n\n  private async artifactCreated(event: ArtifactCreated) {\n    const packager = event.packager\n    const target = event.target\n    const publishConfigs = event.publishConfig == null ? await getPublishConfigs(packager, target == null ? null : (<any>packager.config)[target.name], !this.isPublishOptionGuessed) : [event.publishConfig]\n\n    if (publishConfigs == null) {\n      if (this.isPublish) {\n        debug(`${event.file} is not published: no publish configs`)\n      }\n      return\n    }\n\n    if (this.isPublish) {\n      for (const publishConfig of publishConfigs) {\n        const publisher = this.getOrCreatePublisher(publishConfig, packager.info)\n        if (publisher != null) {\n          if (event.file == null) {\n            this.addTask(publisher.uploadData(event.data!, event.artifactName!))\n          }\n          else {\n            this.addTask(publisher.upload(event.file!, event.artifactName))\n          }\n        }\n      }\n    }\n\n    if (target != null && event.file != null) {\n      if ((packager.platform === Platform.MAC && target.name === \"zip\") || (packager.platform === Platform.WINDOWS && target.name === \"nsis\")) {\n        this.addTask(writeUpdateInfo(event, publishConfigs))\n      }\n    }\n  }\n\n  private addTask(promise: Promise<any>) {\n    this.publishTasks.push(promise\n      .catch(it => this.errors.push(it)))\n  }\n\n  getOrCreatePublisher(publishConfig: PublishConfiguration, buildInfo: BuildInfo): Publisher | null {\n    let publisher = this.nameToPublisher.get(publishConfig.provider)\n    if (publisher == null) {\n      publisher = createPublisher(buildInfo, publishConfig, this.publishOptions, this.isPublishOptionGuessed)\n      this.nameToPublisher.set(publishConfig.provider, publisher)\n    }\n    return publisher\n  }\n\n  cancelTasks() {\n    for (const task of this.publishTasks) {\n      if (\"cancel\" in task) {\n        (<any>task).cancel()\n      }\n    }\n  }\n\n  async awaitTasks() {\n    if (this.errors.length > 0) {\n      this.cancelTasks()\n      throwError(this.errors)\n      return\n    }\n\n    const publishTasks = this.publishTasks\n    let list = publishTasks.slice()\n    publishTasks.length = 0\n    while (list.length > 0) {\n      await BluebirdPromise.all(list)\n      if (publishTasks.length === 0) {\n        break\n      }\n      else {\n        list = publishTasks.slice()\n        publishTasks.length = 0\n      }\n    }\n  }\n}\n\nasync function getPublishConfigsForUpdateInfo(packager: PlatformPackager<any>, publishConfigs: Array<PublishConfiguration> | null): Promise<Array<PublishConfiguration> | null> {\n  if (publishConfigs === null) {\n    return null\n  }\n\n  if (publishConfigs.length === 0) {\n    // https://github.com/electron-userland/electron-builder/issues/925#issuecomment-261732378\n    // default publish config is github, file should be generated regardless of publish state (user can test installer locally or manage the release process manually)\n    const repositoryInfo = await packager.info.repositoryInfo\n    if (repositoryInfo != null && repositoryInfo.type === \"github\") {\n      const resolvedPublishConfig = await getResolvedPublishConfig(packager.info, {provider: repositoryInfo.type}, false)\n      if (resolvedPublishConfig != null) {\n        return [resolvedPublishConfig]\n      }\n    }\n  }\n  return publishConfigs\n}\n\nasync function writeUpdateInfo(event: ArtifactCreated, _publishConfigs: Array<PublishConfiguration>) {\n  const packager = event.packager\n  const publishConfigs = await getPublishConfigsForUpdateInfo(packager, _publishConfigs)\n  if (publishConfigs == null || publishConfigs.length === 0) {\n    return\n  }\n  const outDir = (<ArchiveTarget>event.target).outDir\n\n  for (const publishConfig of publishConfigs) {\n    const isGitHub = publishConfig.provider === \"github\"\n    if (!(publishConfig.provider === \"generic\" || isGitHub)) {\n      continue\n    }\n\n    const version = packager.appInfo.version\n    const channel = (<GenericServerOptions>publishConfig).channel || \"latest\"\n    if (packager.platform === Platform.MAC) {\n      const updateInfoFile = isGitHub ? path.join(outDir, \"github\", `${channel}-mac.json`) : path.join(outDir, `${channel}-mac.json`)\n      await (<any>outputJson)(updateInfoFile, <VersionInfo>{\n        version: version,\n        url: computeDownloadUrl(publishConfig, packager.generateName2(\"zip\", \"mac\", isGitHub), version)\n      }, {spaces: 2})\n\n      packager.info.dispatchArtifactCreated({\n        file: updateInfoFile,\n        packager: packager,\n        target: null,\n        publishConfig: publishConfig,\n      })\n    }\n    else {\n      const githubArtifactName = `${packager.appInfo.name}-Setup-${version}.exe`\n      const sha2 = await sha256(event.file!)\n      const updateInfoFile = path.join(outDir, `${channel}.yml`)\n      await writeFile(updateInfoFile, safeDump(<UpdateInfo>{\n        version: version,\n        githubArtifactName: githubArtifactName,\n        path: path.basename(event.file!),\n        sha2: sha2,\n      }))\n\n      const githubPublishConfig = publishConfigs.find(it => it.provider === \"github\")\n      if (githubPublishConfig != null) {\n        // to preserve compatibility with old electron-updater (< 0.10.0), we upload file with path specific for GitHub\n        packager.info.dispatchArtifactCreated({\n          data: new Buffer(safeDump(<UpdateInfo>{\n            version: version,\n            path: githubArtifactName,\n            sha2: sha2,\n          })),\n          artifactName: `${channel}.yml`,\n          packager: packager,\n          target: null,\n          publishConfig: githubPublishConfig,\n        })\n      }\n\n      const genericPublishConfig = publishConfigs.find(it => it.provider === \"generic\")\n      if (genericPublishConfig != null) {\n        packager.info.dispatchArtifactCreated({\n          file: updateInfoFile,\n          packager: packager,\n          target: null,\n          publishConfig: genericPublishConfig,\n        })\n      }\n      break\n    }\n  }\n}\n\nfunction createPublisher(buildInfo: BuildInfo, publishConfig: PublishConfiguration, options: PublishOptions, isPublishOptionGuessed: boolean = false): Publisher | null {\n  const version = buildInfo.metadata.version!\n  if (publishConfig.provider === \"github\") {\n    const githubInfo: GithubOptions = publishConfig\n    log(`Creating Github Publisher — owner: ${githubInfo.owner}, project: ${githubInfo.repo}, version: ${version}`)\n    return new GitHubPublisher(githubInfo, version, options, isPublishOptionGuessed)\n  }\n  if (publishConfig.provider === \"bintray\") {\n    const bintrayInfo: BintrayOptions = publishConfig\n    log(`Creating Bintray Publisher — user: ${bintrayInfo.user || bintrayInfo.owner}, owner: ${bintrayInfo.owner},  package: ${bintrayInfo.package}, repository: ${bintrayInfo.repo}, version: ${version}`)\n    return new BintrayPublisher(bintrayInfo, version, options)\n  }\n  return null\n}\n\nfunction isAuthTokenSet() {\n  return !isEmptyOrSpaces(process.env.GH_TOKEN) || !isEmptyOrSpaces(process.env.BT_TOKEN)\n}\n\nfunction computeDownloadUrl(publishConfig: PublishConfiguration, fileName: string, version: string) {\n  if (publishConfig.provider === \"generic\") {\n    const baseUrl = url.parse((<GenericServerOptions>publishConfig).url)\n    return url.format(Object.assign({}, baseUrl, {pathname: path.posix.resolve(baseUrl.pathname || \"/\", fileName)}))\n  }\n  else {\n    const gh = <GithubOptions>publishConfig\n    return `https://github.com${`/${gh.owner}/${gh.repo}/releases`}/download/v${version}/${fileName}`\n  }\n}\n\nexport function getPublishConfigs(packager: PlatformPackager<any>, targetSpecificOptions: PlatformSpecificBuildOptions | null | undefined, errorIfCannot: boolean): Promise<Array<PublishConfiguration>> | null {\n  let publishers\n\n  // check build.nsis (target)\n  if (targetSpecificOptions != null) {\n    publishers = targetSpecificOptions.publish\n    // if explicitly set to null - do not publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  // check build.win (platform)\n  if (publishers == null) {\n    publishers = packager.platformSpecificBuildOptions.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    publishers = packager.config.publish\n    if (publishers === null) {\n      return null\n    }\n\n    if (publishers == null && !isEmptyOrSpaces(process.env.GH_TOKEN)) {\n      publishers = [{provider: \"github\"}]\n    }\n    // if both tokens are set — still publish to github (because default publisher is github)\n    if (publishers == null && !isEmptyOrSpaces(process.env.BT_TOKEN)) {\n      publishers = [{provider: \"bintray\"}]\n    }\n  }\n\n  return BluebirdPromise.map(asArray(publishers), it => getResolvedPublishConfig(packager.info, typeof it === \"string\" ? {provider: it} : it, errorIfCannot))\n}\n\nfunction sha256(file: string) {\n  return new BluebirdPromise<string>((resolve, reject) => {\n    const hash = createHash(\"sha256\")\n    hash\n      .on(\"error\", reject)\n      .setEncoding(\"hex\")\n\n    createReadStream(file)\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(<string>hash.read())\n      })\n      .pipe(hash, {end: false})\n  })\n}"
  ]
}
